#coverting pytorch model to core ml  model 

#1 Pytorch to ONNX 

step1 : Load the trained fcn model in python script "neural_style.py"

step2 : run the script using the command as follows : 

    python ./neural_style/neural_style.py eval --content-image dummy.jpg --output-image dummy-out.jpg --model ./saved_models/fcn8.pth --cuda 0 --export_onnx ./saved_models/fcn8.onnx
    
    The arguments given are : 
     1. dummy.jpg is the dummy input image to which the model apply the style transfer and it can be a blank image.
        The pixel size of this image is important, as this will be the size for the exported style transfer model. 
     2. dummy-out.jpg is the path for saving output image 
     3. model - is the final checkpoint or trained model of fcn which is fcn8.pth
     4. if running in gpu set cuda to 1 or in cpu set it to 0 .
     5. export_onnx  is the path to save the converted onnx file . 
     
 #2 ONNX to Core ml 
 
 run the onnx to coreml.py as: 
 
 python onnx_to_coreml.py ./saved_models/fcn8.onnx ./saved_models/fcn8.mlmodel
